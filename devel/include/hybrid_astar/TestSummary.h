// Generated by gencpp from file hybrid_astar/TestSummary.msg
// DO NOT EDIT!


#ifndef HYBRID_ASTAR_MESSAGE_TESTSUMMARY_H
#define HYBRID_ASTAR_MESSAGE_TESTSUMMARY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hybrid_astar
{
template <class ContainerAllocator>
struct TestSummary_
{
  typedef TestSummary_<ContainerAllocator> Type;

  TestSummary_()
    : successful_tests(0)
    , unsuccessful_tests(0)
    , iteration_limits(0)
    , total_tests(0)  {
    }
  TestSummary_(const ContainerAllocator& _alloc)
    : successful_tests(0)
    , unsuccessful_tests(0)
    , iteration_limits(0)
    , total_tests(0)  {
  (void)_alloc;
    }



   typedef uint64_t _successful_tests_type;
  _successful_tests_type successful_tests;

   typedef uint64_t _unsuccessful_tests_type;
  _unsuccessful_tests_type unsuccessful_tests;

   typedef uint64_t _iteration_limits_type;
  _iteration_limits_type iteration_limits;

   typedef uint64_t _total_tests_type;
  _total_tests_type total_tests;





  typedef boost::shared_ptr< ::hybrid_astar::TestSummary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hybrid_astar::TestSummary_<ContainerAllocator> const> ConstPtr;

}; // struct TestSummary_

typedef ::hybrid_astar::TestSummary_<std::allocator<void> > TestSummary;

typedef boost::shared_ptr< ::hybrid_astar::TestSummary > TestSummaryPtr;
typedef boost::shared_ptr< ::hybrid_astar::TestSummary const> TestSummaryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hybrid_astar::TestSummary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hybrid_astar::TestSummary_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hybrid_astar::TestSummary_<ContainerAllocator1> & lhs, const ::hybrid_astar::TestSummary_<ContainerAllocator2> & rhs)
{
  return lhs.successful_tests == rhs.successful_tests &&
    lhs.unsuccessful_tests == rhs.unsuccessful_tests &&
    lhs.iteration_limits == rhs.iteration_limits &&
    lhs.total_tests == rhs.total_tests;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hybrid_astar::TestSummary_<ContainerAllocator1> & lhs, const ::hybrid_astar::TestSummary_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hybrid_astar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::TestSummary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::TestSummary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::TestSummary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::TestSummary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::TestSummary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::TestSummary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hybrid_astar::TestSummary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfac551d5488bc9c563aaa33200405e9";
  }

  static const char* value(const ::hybrid_astar::TestSummary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfac551d5488bc9cULL;
  static const uint64_t static_value2 = 0x563aaa33200405e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::hybrid_astar::TestSummary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hybrid_astar/TestSummary";
  }

  static const char* value(const ::hybrid_astar::TestSummary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hybrid_astar::TestSummary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 successful_tests\n"
"uint64 unsuccessful_tests\n"
"uint64 iteration_limits\n"
"uint64 total_tests\n"
;
  }

  static const char* value(const ::hybrid_astar::TestSummary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hybrid_astar::TestSummary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.successful_tests);
      stream.next(m.unsuccessful_tests);
      stream.next(m.iteration_limits);
      stream.next(m.total_tests);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestSummary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hybrid_astar::TestSummary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hybrid_astar::TestSummary_<ContainerAllocator>& v)
  {
    s << indent << "successful_tests: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.successful_tests);
    s << indent << "unsuccessful_tests: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.unsuccessful_tests);
    s << indent << "iteration_limits: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.iteration_limits);
    s << indent << "total_tests: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.total_tests);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYBRID_ASTAR_MESSAGE_TESTSUMMARY_H
