// Generated by gencpp from file hybrid_astar/MonteCarloSimResponse.msg
// DO NOT EDIT!


#ifndef HYBRID_ASTAR_MESSAGE_MONTECARLOSIMRESPONSE_H
#define HYBRID_ASTAR_MESSAGE_MONTECARLOSIMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Path.h>

namespace hybrid_astar
{
template <class ContainerAllocator>
struct MonteCarloSimResponse_
{
  typedef MonteCarloSimResponse_<ContainerAllocator> Type;

  MonteCarloSimResponse_()
    : valid_start(false)
    , valid_goal(false)
    , solution_found(false)
    , path()
    , iterations(0)
    , iteration_limit(false)
    , nodes(0)
    , execution_time(0)  {
    }
  MonteCarloSimResponse_(const ContainerAllocator& _alloc)
    : valid_start(false)
    , valid_goal(false)
    , solution_found(false)
    , path(_alloc)
    , iterations(0)
    , iteration_limit(false)
    , nodes(0)
    , execution_time(0)  {
  (void)_alloc;
    }



   typedef uint8_t _valid_start_type;
  _valid_start_type valid_start;

   typedef uint8_t _valid_goal_type;
  _valid_goal_type valid_goal;

   typedef uint8_t _solution_found_type;
  _solution_found_type solution_found;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _path_type;
  _path_type path;

   typedef uint64_t _iterations_type;
  _iterations_type iterations;

   typedef uint8_t _iteration_limit_type;
  _iteration_limit_type iteration_limit;

   typedef uint64_t _nodes_type;
  _nodes_type nodes;

   typedef uint64_t _execution_time_type;
  _execution_time_type execution_time;





  typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MonteCarloSimResponse_

typedef ::hybrid_astar::MonteCarloSimResponse_<std::allocator<void> > MonteCarloSimResponse;

typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimResponse > MonteCarloSimResponsePtr;
typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimResponse const> MonteCarloSimResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator1> & lhs, const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator2> & rhs)
{
  return lhs.valid_start == rhs.valid_start &&
    lhs.valid_goal == rhs.valid_goal &&
    lhs.solution_found == rhs.solution_found &&
    lhs.path == rhs.path &&
    lhs.iterations == rhs.iterations &&
    lhs.iteration_limit == rhs.iteration_limit &&
    lhs.nodes == rhs.nodes &&
    lhs.execution_time == rhs.execution_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator1> & lhs, const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hybrid_astar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72a5e350f62841c24f464d0dedd7f2cc";
  }

  static const char* value(const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72a5e350f62841c2ULL;
  static const uint64_t static_value2 = 0x4f464d0dedd7f2ccULL;
};

template<class ContainerAllocator>
struct DataType< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hybrid_astar/MonteCarloSimResponse";
  }

  static const char* value(const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool valid_start\n"
"bool valid_goal\n"
"bool solution_found\n"
"nav_msgs/Path path\n"
"uint64 iterations\n"
"bool iteration_limit\n"
"uint64 nodes\n"
"uint64 execution_time\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valid_start);
      stream.next(m.valid_goal);
      stream.next(m.solution_found);
      stream.next(m.path);
      stream.next(m.iterations);
      stream.next(m.iteration_limit);
      stream.next(m.nodes);
      stream.next(m.execution_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MonteCarloSimResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hybrid_astar::MonteCarloSimResponse_<ContainerAllocator>& v)
  {
    s << indent << "valid_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_start);
    s << indent << "valid_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_goal);
    s << indent << "solution_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solution_found);
    s << indent << "path: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
    s << indent << "iterations: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.iterations);
    s << indent << "iteration_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iteration_limit);
    s << indent << "nodes: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.nodes);
    s << indent << "execution_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.execution_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYBRID_ASTAR_MESSAGE_MONTECARLOSIMRESPONSE_H
