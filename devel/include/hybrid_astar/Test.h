// Generated by gencpp from file hybrid_astar/Test.msg
// DO NOT EDIT!


#ifndef HYBRID_ASTAR_MESSAGE_TEST_H
#define HYBRID_ASTAR_MESSAGE_TEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Path.h>

namespace hybrid_astar
{
template <class ContainerAllocator>
struct Test_
{
  typedef Test_<ContainerAllocator> Type;

  Test_()
    : sx(0.0)
    , sy(0.0)
    , syaw(0.0)
    , syaw_t(0.0)
    , gx(0.0)
    , gy(0.0)
    , gyaw(0.0)
    , gyaw_t(0.0)
    , solution_found(false)
    , iterations(0)
    , iteration_limit(false)
    , nodes(0)
    , execution_time(0)
    , path_length(0.0)
    , path()  {
    }
  Test_(const ContainerAllocator& _alloc)
    : sx(0.0)
    , sy(0.0)
    , syaw(0.0)
    , syaw_t(0.0)
    , gx(0.0)
    , gy(0.0)
    , gyaw(0.0)
    , gyaw_t(0.0)
    , solution_found(false)
    , iterations(0)
    , iteration_limit(false)
    , nodes(0)
    , execution_time(0)
    , path_length(0.0)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef float _sx_type;
  _sx_type sx;

   typedef float _sy_type;
  _sy_type sy;

   typedef float _syaw_type;
  _syaw_type syaw;

   typedef float _syaw_t_type;
  _syaw_t_type syaw_t;

   typedef float _gx_type;
  _gx_type gx;

   typedef float _gy_type;
  _gy_type gy;

   typedef float _gyaw_type;
  _gyaw_type gyaw;

   typedef float _gyaw_t_type;
  _gyaw_t_type gyaw_t;

   typedef uint8_t _solution_found_type;
  _solution_found_type solution_found;

   typedef uint64_t _iterations_type;
  _iterations_type iterations;

   typedef uint8_t _iteration_limit_type;
  _iteration_limit_type iteration_limit;

   typedef uint64_t _nodes_type;
  _nodes_type nodes;

   typedef uint64_t _execution_time_type;
  _execution_time_type execution_time;

   typedef float _path_length_type;
  _path_length_type path_length;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::hybrid_astar::Test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hybrid_astar::Test_<ContainerAllocator> const> ConstPtr;

}; // struct Test_

typedef ::hybrid_astar::Test_<std::allocator<void> > Test;

typedef boost::shared_ptr< ::hybrid_astar::Test > TestPtr;
typedef boost::shared_ptr< ::hybrid_astar::Test const> TestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hybrid_astar::Test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hybrid_astar::Test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hybrid_astar::Test_<ContainerAllocator1> & lhs, const ::hybrid_astar::Test_<ContainerAllocator2> & rhs)
{
  return lhs.sx == rhs.sx &&
    lhs.sy == rhs.sy &&
    lhs.syaw == rhs.syaw &&
    lhs.syaw_t == rhs.syaw_t &&
    lhs.gx == rhs.gx &&
    lhs.gy == rhs.gy &&
    lhs.gyaw == rhs.gyaw &&
    lhs.gyaw_t == rhs.gyaw_t &&
    lhs.solution_found == rhs.solution_found &&
    lhs.iterations == rhs.iterations &&
    lhs.iteration_limit == rhs.iteration_limit &&
    lhs.nodes == rhs.nodes &&
    lhs.execution_time == rhs.execution_time &&
    lhs.path_length == rhs.path_length &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hybrid_astar::Test_<ContainerAllocator1> & lhs, const ::hybrid_astar::Test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hybrid_astar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::Test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::Test_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::Test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::Test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::Test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::Test_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hybrid_astar::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef75a306c37c4591304868247fd26f8c";
  }

  static const char* value(const ::hybrid_astar::Test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef75a306c37c4591ULL;
  static const uint64_t static_value2 = 0x304868247fd26f8cULL;
};

template<class ContainerAllocator>
struct DataType< ::hybrid_astar::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hybrid_astar/Test";
  }

  static const char* value(const ::hybrid_astar::Test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hybrid_astar::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 sx\n"
"float32 sy\n"
"float32 syaw\n"
"float32 syaw_t\n"
"float32 gx\n"
"float32 gy\n"
"float32 gyaw\n"
"float32 gyaw_t\n"
"bool solution_found\n"
"uint64 iterations\n"
"bool iteration_limit\n"
"uint64 nodes\n"
"uint64 execution_time\n"
"float32 path_length\n"
"nav_msgs/Path path\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::hybrid_astar::Test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hybrid_astar::Test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sx);
      stream.next(m.sy);
      stream.next(m.syaw);
      stream.next(m.syaw_t);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.gyaw);
      stream.next(m.gyaw_t);
      stream.next(m.solution_found);
      stream.next(m.iterations);
      stream.next(m.iteration_limit);
      stream.next(m.nodes);
      stream.next(m.execution_time);
      stream.next(m.path_length);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hybrid_astar::Test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hybrid_astar::Test_<ContainerAllocator>& v)
  {
    s << indent << "sx: ";
    Printer<float>::stream(s, indent + "  ", v.sx);
    s << indent << "sy: ";
    Printer<float>::stream(s, indent + "  ", v.sy);
    s << indent << "syaw: ";
    Printer<float>::stream(s, indent + "  ", v.syaw);
    s << indent << "syaw_t: ";
    Printer<float>::stream(s, indent + "  ", v.syaw_t);
    s << indent << "gx: ";
    Printer<float>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<float>::stream(s, indent + "  ", v.gy);
    s << indent << "gyaw: ";
    Printer<float>::stream(s, indent + "  ", v.gyaw);
    s << indent << "gyaw_t: ";
    Printer<float>::stream(s, indent + "  ", v.gyaw_t);
    s << indent << "solution_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solution_found);
    s << indent << "iterations: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.iterations);
    s << indent << "iteration_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iteration_limit);
    s << indent << "nodes: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.nodes);
    s << indent << "execution_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.execution_time);
    s << indent << "path_length: ";
    Printer<float>::stream(s, indent + "  ", v.path_length);
    s << indent << "path: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYBRID_ASTAR_MESSAGE_TEST_H
