// Generated by gencpp from file hybrid_astar/obsResponse.msg
// DO NOT EDIT!


#ifndef HYBRID_ASTAR_MESSAGE_OBSRESPONSE_H
#define HYBRID_ASTAR_MESSAGE_OBSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hybrid_astar
{
template <class ContainerAllocator>
struct obsResponse_
{
  typedef obsResponse_<ContainerAllocator> Type;

  obsResponse_()
    : result()
    , obstacles(false)  {
    }
  obsResponse_(const ContainerAllocator& _alloc)
    : result(_alloc)
    , obstacles(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef uint8_t _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::hybrid_astar::obsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hybrid_astar::obsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct obsResponse_

typedef ::hybrid_astar::obsResponse_<std::allocator<void> > obsResponse;

typedef boost::shared_ptr< ::hybrid_astar::obsResponse > obsResponsePtr;
typedef boost::shared_ptr< ::hybrid_astar::obsResponse const> obsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hybrid_astar::obsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hybrid_astar::obsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hybrid_astar::obsResponse_<ContainerAllocator1> & lhs, const ::hybrid_astar::obsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hybrid_astar::obsResponse_<ContainerAllocator1> & lhs, const ::hybrid_astar::obsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hybrid_astar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::obsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::obsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::obsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::obsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::obsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::obsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hybrid_astar::obsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d113984db4546f8065e55551ed7b8124";
  }

  static const char* value(const ::hybrid_astar::obsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd113984db4546f80ULL;
  static const uint64_t static_value2 = 0x65e55551ed7b8124ULL;
};

template<class ContainerAllocator>
struct DataType< ::hybrid_astar::obsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hybrid_astar/obsResponse";
  }

  static const char* value(const ::hybrid_astar::obsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hybrid_astar::obsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string result\n"
"bool obstacles\n"
"\n"
;
  }

  static const char* value(const ::hybrid_astar::obsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hybrid_astar::obsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hybrid_astar::obsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hybrid_astar::obsResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "obstacles: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYBRID_ASTAR_MESSAGE_OBSRESPONSE_H
