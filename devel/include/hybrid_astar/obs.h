// Generated by gencpp from file hybrid_astar/obs.msg
// DO NOT EDIT!


#ifndef HYBRID_ASTAR_MESSAGE_OBS_H
#define HYBRID_ASTAR_MESSAGE_OBS_H

#include <ros/service_traits.h>


#include <hybrid_astar/obsRequest.h>
#include <hybrid_astar/obsResponse.h>


namespace hybrid_astar
{

struct obs
{

typedef obsRequest Request;
typedef obsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct obs
} // namespace hybrid_astar


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::hybrid_astar::obs > {
  static const char* value()
  {
    return "5e3dfcf370bd21f423a0f98a6e24c09d";
  }

  static const char* value(const ::hybrid_astar::obs&) { return value(); }
};

template<>
struct DataType< ::hybrid_astar::obs > {
  static const char* value()
  {
    return "hybrid_astar/obs";
  }

  static const char* value(const ::hybrid_astar::obs&) { return value(); }
};


// service_traits::MD5Sum< ::hybrid_astar::obsRequest> should match
// service_traits::MD5Sum< ::hybrid_astar::obs >
template<>
struct MD5Sum< ::hybrid_astar::obsRequest>
{
  static const char* value()
  {
    return MD5Sum< ::hybrid_astar::obs >::value();
  }
  static const char* value(const ::hybrid_astar::obsRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::hybrid_astar::obsRequest> should match
// service_traits::DataType< ::hybrid_astar::obs >
template<>
struct DataType< ::hybrid_astar::obsRequest>
{
  static const char* value()
  {
    return DataType< ::hybrid_astar::obs >::value();
  }
  static const char* value(const ::hybrid_astar::obsRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::hybrid_astar::obsResponse> should match
// service_traits::MD5Sum< ::hybrid_astar::obs >
template<>
struct MD5Sum< ::hybrid_astar::obsResponse>
{
  static const char* value()
  {
    return MD5Sum< ::hybrid_astar::obs >::value();
  }
  static const char* value(const ::hybrid_astar::obsResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::hybrid_astar::obsResponse> should match
// service_traits::DataType< ::hybrid_astar::obs >
template<>
struct DataType< ::hybrid_astar::obsResponse>
{
  static const char* value()
  {
    return DataType< ::hybrid_astar::obs >::value();
  }
  static const char* value(const ::hybrid_astar::obsResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // HYBRID_ASTAR_MESSAGE_OBS_H
