// Generated by gencpp from file hybrid_astar/MonteCarloSimRequest.msg
// DO NOT EDIT!


#ifndef HYBRID_ASTAR_MESSAGE_MONTECARLOSIMREQUEST_H
#define HYBRID_ASTAR_MESSAGE_MONTECARLOSIMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hybrid_astar
{
template <class ContainerAllocator>
struct MonteCarloSimRequest_
{
  typedef MonteCarloSimRequest_<ContainerAllocator> Type;

  MonteCarloSimRequest_()
    : sx(0.0)
    , sy(0.0)
    , syaw(0.0)
    , syaw_t(0.0)
    , gx(0.0)
    , gy(0.0)
    , gyaw(0.0)
    , gyaw_t(0.0)  {
    }
  MonteCarloSimRequest_(const ContainerAllocator& _alloc)
    : sx(0.0)
    , sy(0.0)
    , syaw(0.0)
    , syaw_t(0.0)
    , gx(0.0)
    , gy(0.0)
    , gyaw(0.0)
    , gyaw_t(0.0)  {
  (void)_alloc;
    }



   typedef float _sx_type;
  _sx_type sx;

   typedef float _sy_type;
  _sy_type sy;

   typedef float _syaw_type;
  _syaw_type syaw;

   typedef float _syaw_t_type;
  _syaw_t_type syaw_t;

   typedef float _gx_type;
  _gx_type gx;

   typedef float _gy_type;
  _gy_type gy;

   typedef float _gyaw_type;
  _gyaw_type gyaw;

   typedef float _gyaw_t_type;
  _gyaw_t_type gyaw_t;





  typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MonteCarloSimRequest_

typedef ::hybrid_astar::MonteCarloSimRequest_<std::allocator<void> > MonteCarloSimRequest;

typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimRequest > MonteCarloSimRequestPtr;
typedef boost::shared_ptr< ::hybrid_astar::MonteCarloSimRequest const> MonteCarloSimRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator1> & lhs, const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sx == rhs.sx &&
    lhs.sy == rhs.sy &&
    lhs.syaw == rhs.syaw &&
    lhs.syaw_t == rhs.syaw_t &&
    lhs.gx == rhs.gx &&
    lhs.gy == rhs.gy &&
    lhs.gyaw == rhs.gyaw &&
    lhs.gyaw_t == rhs.gyaw_t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator1> & lhs, const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hybrid_astar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8510ffb4a4c221f8dc3caa103b7bf3b8";
  }

  static const char* value(const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8510ffb4a4c221f8ULL;
  static const uint64_t static_value2 = 0xdc3caa103b7bf3b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hybrid_astar/MonteCarloSimRequest";
  }

  static const char* value(const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 sx\n"
"float32 sy\n"
"float32 syaw\n"
"float32 syaw_t\n"
"float32 gx\n"
"float32 gy\n"
"float32 gyaw\n"
"float32 gyaw_t\n"
;
  }

  static const char* value(const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sx);
      stream.next(m.sy);
      stream.next(m.syaw);
      stream.next(m.syaw_t);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.gyaw);
      stream.next(m.gyaw_t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MonteCarloSimRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hybrid_astar::MonteCarloSimRequest_<ContainerAllocator>& v)
  {
    s << indent << "sx: ";
    Printer<float>::stream(s, indent + "  ", v.sx);
    s << indent << "sy: ";
    Printer<float>::stream(s, indent + "  ", v.sy);
    s << indent << "syaw: ";
    Printer<float>::stream(s, indent + "  ", v.syaw);
    s << indent << "syaw_t: ";
    Printer<float>::stream(s, indent + "  ", v.syaw_t);
    s << indent << "gx: ";
    Printer<float>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<float>::stream(s, indent + "  ", v.gy);
    s << indent << "gyaw: ";
    Printer<float>::stream(s, indent + "  ", v.gyaw);
    s << indent << "gyaw_t: ";
    Printer<float>::stream(s, indent + "  ", v.gyaw_t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYBRID_ASTAR_MESSAGE_MONTECARLOSIMREQUEST_H
